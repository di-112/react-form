{"version":3,"sources":["components/buttonsPanel/buttonsPanel.jsx","components/errors/errors.jsx","components/form/form.jsx","components/events/event/futureEventText/futureEventText.jsx","components/events/event/pastEventText/pastEventText.jsx","components/events/event/event.jsx","components/events/events.jsx","App.js","reportWebVitals.js","index.js"],"names":["ButtonsPanel","countEvent","addField","removeField","className","onClick","danger","disabled","htmlType","Errors","errors","index","name","date","formatDate","defaultEvent","Form","setData","useForm","mode","handleSubmit","control","formState","useFieldArray","fields","append","remove","useEffect","length","onSubmit","data","startDate","events","map","event","forEach","duration","diff","format","htmlFor","defaultValue","moment","render","field","id","style","marginBottom","rules","required","placeholder","size","type","FutureEventText","wordForDays","PastEventText","Math","abs","Event","diffDate","getWordForDiffDate","Events","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e9fea4c.chunk.js","sourcesContent":["import { Button } from 'antd'\r\nimport React from 'react'\r\nimport './buttonsPanel.scss'\r\n\r\nconst ButtonsPanel = ({ countEvent, addField, removeField }) => {\r\n  return (\r\n    <div className=\"form-btns\">\r\n      <div className=\"set-count-btns\">\r\n        <Button className=\"add\" onClick={addField}>\r\n          +\r\n        </Button>\r\n        <Button className=\"remove\" danger disabled={countEvent > 1 ? false : true} onClick={removeField}>\r\n          -\r\n        </Button>\r\n      </div>\r\n      <Button className=\"submit-btn\" htmlType=\"submit\">\r\n        Отправить\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonsPanel\r\n","import React from 'react'\r\nimport './errors.scss'\r\n\r\nconst Errors = ({ errors, index }) => {\r\n  if (errors && errors[`${index}`])\r\n    return (\r\n      <>\r\n        {errors[`${index}`].name && <div className=\"error\">Ведите название события</div>}\r\n        {errors[`${index}`].date && <div className=\"error\">Ведите дату события</div>}\r\n      </>\r\n    )\r\n  return null\r\n}\r\n\r\nexport default Errors\r\n","import React, { useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { DatePicker, Input } from 'antd'\r\nimport ButtonsPanel from '../buttonsPanel/buttonsPanel'\r\nimport { Controller, useFieldArray, useForm } from 'react-hook-form'\r\nimport './form.scss'\r\nimport Errors from '../errors/errors'\r\n\r\nconst formatDate = 'DD-MM-YYYY'\r\n\r\nconst defaultEvent = {\r\n  name: 'event',\r\n}\r\n\r\nconst Form = ({ setData }) => {\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm({\r\n    mode: 'onBlur',\r\n  })\r\n\r\n  const { fields, append, remove } = useFieldArray({\r\n    control,\r\n    name: 'events',\r\n  })\r\n\r\n  useEffect(() => {\r\n    if (!fields.length) append(defaultEvent)\r\n  }, [])\r\n\r\n  const addField = () => append(defaultEvent)\r\n\r\n  const removeField = () => remove(fields.length - 1)\r\n\r\n  const submitData = data => {\r\n    const { startDate, ...rest } = data\r\n    const events = rest.events.map(event => event)\r\n    events.forEach(event => {\r\n      event.duration = event.date.diff(startDate, 'days')\r\n      if (event.duration < 1) {\r\n        if (event.date.format(formatDate) !== startDate.format(formatDate)) event.duration = event.duration - 1\r\n      }\r\n      event.date = event.date.format(formatDate)\r\n    })\r\n    setData(events)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(submitData)}>\r\n      <label htmlFor=\"currDate\">Дата отсчета:</label>\r\n      <Controller\r\n        control={control}\r\n        defaultValue={moment()}\r\n        name=\"startDate\"\r\n        render={({ field }) => <DatePicker {...field} id=\"currDate\" format={formatDate} className=\"current-date\" />}\r\n      />\r\n\r\n      {fields.map((field, index) => (\r\n        <div style={{ marginBottom: '20px' }} key={field.id}>\r\n          <div className=\"event\">\r\n            <label htmlFor=\"eventName\">Название события: </label>\r\n            <Controller\r\n              name={`events[${index}].name`}\r\n              control={control}\r\n              rules={{ required: true }}\r\n              render={({ field }) => (\r\n                <Input {...field} id=\"eventName\" className=\"event__name\" placeholder=\"Enter event name, please\" size=\"big\" type=\"text\" />\r\n              )}\r\n            />\r\n\r\n            <label htmlFor=\"eventDate\">Дата события: </label>\r\n            <Controller\r\n              name={`events[${index}].date`}\r\n              control={control}\r\n              rules={{ required: true }}\r\n              render={({ field }) => <DatePicker {...field} id=\"eventDate\" format={formatDate} className=\"event__date\" />}\r\n            />\r\n          </div>\r\n          <Errors errors={errors.events} index={index} />\r\n        </div>\r\n      ))}\r\n      <ButtonsPanel countEvent={fields.length} addField={addField} removeField={removeField} />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst FutureEventText = ({ duration, wordForDays }) => (\r\n  <>\r\n    <strong> Произойдет </strong>\r\n    {duration > 1 ? <span>{`через ${duration} ${wordForDays}`}</span> : <span>{wordForDays}</span>}\r\n  </>\r\n)\r\n\r\nexport default FutureEventText\r\n","import React from 'react'\r\n\r\nconst PastEventText = ({ duration, wordForDays }) => (\r\n  <>\r\n    <strong> {`Произошло ${duration === 0 ? ' / Произойдет ' : ''}`}</strong>\r\n    {duration === -1 || duration === 0 ? <span>{wordForDays} </span> : <span>{`${Math.abs(duration)} ${wordForDays} назад`}</span>}\r\n  </>\r\n)\r\n\r\nexport default PastEventText\r\n","import React from 'react'\r\nimport './event.scss'\r\nimport FutureEventText from './futureEventText/futureEventText'\r\nimport PastEventText from './pastEventText/pastEventText'\r\n\r\nconst getWordForDiffDate = diffDate => {\r\n  if (diffDate === 0) return 'сегодня'\r\n  else if (diffDate === 1) return 'завтра'\r\n  else if (diffDate === -1) return 'вчера'\r\n  else if (diffDate > 10 && diffDate < 15) return 'дней'\r\n  else {\r\n    switch (Math.abs(diffDate) % 10) {\r\n      case 1:\r\n        return 'день'\r\n      case 2:\r\n      case 3:\r\n      case 4:\r\n        return 'дня'\r\n      default:\r\n        return 'дней'\r\n    }\r\n  }\r\n}\r\n\r\nconst Event = ({ event: { name, duration } }) => {\r\n  const wordForDays = getWordForDiffDate(duration)\r\n  return (\r\n    <div className=\"event\">\r\n      <strong>Событие </strong>\r\n      <span>{name}</span>\r\n      {duration > 0 ? (\r\n        <FutureEventText duration={duration} wordForDays={wordForDays} />\r\n      ) : (\r\n        <PastEventText duration={duration} wordForDays={wordForDays} />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Event\r\n","import React from 'react'\r\nimport Event from './event/event'\r\nimport './events.scss'\r\n\r\nconst Events = ({ events }) => {\r\n  return (\r\n    <div className=\"sended-events\">\r\n      {events.map((event, index) => (\r\n        <Event key={index} event={event} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Events\r\n","import './App.scss'\r\nimport 'antd/dist/antd.css'\r\nimport React, { useState } from 'react'\r\nimport Form from './components/form/form'\r\nimport Events from './components/events/events'\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState()\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Form setData={setData} />\r\n      {data && <Events events={data} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}